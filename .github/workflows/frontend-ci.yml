name: Frontend CI/CD

on:
  workflow_dispatch: # Manual trigger only
  # push:
  #   branches: [ main, develop ]
  #   paths: [ 'frontend/**' ]
  # pull_request:
  #   branches: [ main ]
  #   paths: [ 'frontend/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Install dependencies
      working-directory: ./frontend
      run: bun install --frozen-lockfile
    
    - name: Run type checking
      working-directory: ./frontend
      run: bun run type-check
    
    - name: Run tests
      working-directory: ./frontend
      run: bun test
    
    - name: Run build
      working-directory: ./frontend
      run: bun run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/dist/
        retention-days: 7

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      working-directory: ./frontend
      run: bun install --frozen-lockfile
    
    - name: Run ESLint
      working-directory: ./frontend
      run: bun run lint || true  # Continue even if there are linting errors
    
    - name: Run Prettier check
      working-directory: ./frontend
      run: bun run format:check || true  # Continue even if formatting is needed

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      working-directory: ./frontend
      run: bun install --frozen-lockfile
    
    - name: Run security audit
      working-directory: ./frontend
      run: bun audit

  build-and-deploy:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Install dependencies
      working-directory: ./frontend
      run: bun install --frozen-lockfile
    
    - name: Build for production
      working-directory: ./frontend
      run: bun run build
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
    
    - name: Deploy to Cloudflare Pages
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: pages publish ./frontend/dist --project-name=ogp-verification-frontend
    
    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/ogp-verification-frontend:latest
          ghcr.io/${{ github.repository_owner }}/ogp-verification-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  lighthouse:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://ogp-verification.pages.dev
        uploadArtifacts: true
        temporaryPublicStorage: true
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}