name: Terraform CI/CD

on:
  workflow_dispatch: # Manual trigger only
  # push:
  #   branches: [ main, develop ]
  #   paths: [ 'terraform/**' ]
  # pull_request:
  #   branches: [ main ]
  #   paths: [ 'terraform/**' ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check
    
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      env:
        TF_VAR_sakuracloud_token: ${{ secrets.SAKURACLOUD_TOKEN }}
        TF_VAR_sakuracloud_secret: ${{ secrets.SAKURACLOUD_SECRET }}
        TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_server_password: ${{ secrets.SERVER_PASSWORD }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
    
    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate
    
    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -no-color
      env:
        TF_VAR_sakuracloud_token: ${{ secrets.SAKURACLOUD_TOKEN }}
        TF_VAR_sakuracloud_secret: ${{ secrets.SAKURACLOUD_SECRET }}
        TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_server_password: ${{ secrets.SERVER_PASSWORD }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      working-directory: ./terraform
      run: terraform apply -auto-approve
      env:
        TF_VAR_sakuracloud_token: ${{ secrets.SAKURACLOUD_TOKEN }}
        TF_VAR_sakuracloud_secret: ${{ secrets.SAKURACLOUD_SECRET }}
        TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_server_password: ${{ secrets.SERVER_PASSWORD }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
    
    - name: Terraform Output
      if: github.ref == 'refs/heads/main'
      working-directory: ./terraform
      run: terraform output -no-color
      env:
        TF_VAR_sakuracloud_token: ${{ secrets.SAKURACLOUD_TOKEN }}
        TF_VAR_sakuracloud_secret: ${{ secrets.SAKURACLOUD_SECRET }}
        TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_server_password: ${{ secrets.SERVER_PASSWORD }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Checkov action
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./terraform
        framework: terraform
        output_format: sarif
        output_file_path: reports/results.sarif
    
    - name: Upload Checkov results to GitHub Advanced Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/results.sarif

  tflint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache plugin dir
      uses: actions/cache@v3
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}
    
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: v0.48.0
    
    - name: Show version
      run: tflint --version
    
    - name: Init TFLint
      working-directory: ./terraform
      run: tflint --init
    
    - name: Run TFLint
      working-directory: ./terraform
      run: tflint -f compact